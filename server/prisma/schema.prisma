// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// 

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  role          String        @default("Customer")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  email         String        @unique
  fullName      String
  passwordHash  String?
  userAddress   UserAddress?
  userAddressId String?
  products      Product[]
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
  subscription  Subscription?
  subscriptionitems  SubscriptionItem[]
}

model Product {
  id           String     @id @default(uuid())
  creator      User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId    String?
  category     Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String?
  previewImage String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  title        String     @unique
  quantityLeft Int
  price        Int
  note         String
  varients     Varient[]
  cartItems    CartItem[]
  subscriptionItems SubscriptionItem[]
  // orders       Order[]
  reviews      Review[]
}

model Varient {
  id           String     @id @default(uuid())
  title        String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId    String
  previewImage String?
  // orders       Order[]
  cartItems    CartItem[]
  subscriptionItems SubscriptionItem[]
}

model Review {
  id        String   @id @default(uuid())
  creator   User?    @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  note      String
  rating    Int

  @@unique([creatorId, productId])
}

model Order {
  id         String   @id @default(uuid())
  quantity   Int      @default(1)
  status     String   @default("pending") //pending, paid, verified, delivered
  price      Int
  creator    User?    @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId  String?
  // product    Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  // productId  String
  // varient    Varient? @relation(fields: [varientId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  // varientId  String?
  coupon     Coupon?  @relation(fields: [couponId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  couponId   String?
  ordered Boolean @default(false)
  cartItems   CartItem[] 
}

model CartItem {
  id             String       @id @default(uuid())
  creator        User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId      String?
  quantity  Int @default(1)
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId      String
  varient        Varient?    @relation(fields: [varientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  varientId      String?
  price          Decimal?
  order          Order? @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderId        String?
  
}

model Subscription {
  id        String     @id @default(uuid())
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String   @unique
  subscriptionItems SubscriptionItem[]
  interval  String     @default("monthly") // monthly weekly
}

model SubscriptionItem {
  id             String       @id @default(uuid())
  quantity  Int @default(1)
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId      String
  varient        Varient?    @relation(fields: [varientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  varientId      String?
   creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String 
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String?
}
model Category {
  title     String
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  token      String   @unique
  expires    DateTime
  percentage Int
  orders     Order[]
}

model UserAddress {
  id              String  @id @default(uuid())
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String? @unique
  homeIdNumber    String?
  closestLandmark String
  street          String
  lga             String
  postalCode      String
  town            String
  note            String
}
